name: Base Create Release
run-name: Create GitHub Release for ${{ inputs.package_display_name }}

on:
  workflow_call:
    inputs:
      package_display_name:
        description: 'Display name for the package (e.g., Mobile Web MCP Server)'
        required: true
        type: string
      package_path:
        description: 'Path to package directory (e.g., packages/mobile-web)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build package
        run: npx nx build ${{ inputs.package_path }}

      - name: Run tests
        run: npx nx test ${{ inputs.package_path }}

      - name: Get package information
        id: package-info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const packagePath = '${{ inputs.package_path }}';
            const packageJsonPath = path.join(packagePath, 'package.json');

            if (!fs.existsSync(packageJsonPath)) {
              core.setFailed(`package.json not found at ${packageJsonPath}`);
              return;
            }

            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
            const packageFullName = packageJson.name;
            const version = packageJson.version;

            // Create standardized names
            // Remove @scope/ prefix and replace slashes with dashes for tag
            const tagPrefix = packageFullName.replace(/^@[^/]+\//, '').replace(/\//g, '-');
            const tagName = `${tagPrefix}_v${version}`;

            // Use display name for release title
            const releaseName = `${{ inputs.package_display_name }} v${version}`;

            // Set outputs
            core.setOutput('package_full_name', packageFullName);
            core.setOutput('version', version);
            core.setOutput('tag_name', tagName);
            core.setOutput('release_name', releaseName);

            // Log information
            core.info(`üì¶ Package: ${packageFullName}`);
            core.info(`üî¢ Version: ${version}`);
            core.info(`üè∑Ô∏è  Tag: ${tagName}`);
            core.info(`üìã Release: ${releaseName}`);

      - name: Check if tag exists
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.package-info.outputs.tag_name }}';

            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
              
              core.setFailed(`‚ùå Tag ${tagName} already exists. Please increment the version in package.json and try again.`);
            } catch (error) {
              if (error.status === 404) {
                core.info(`‚úÖ Tag ${tagName} is available`);
              } else {
                core.setFailed(`Error checking tag: ${error.message}`);
              }
            }

      - name: Create package tarball
        id: create-tarball
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const path = require('path');

            const packagePath = '${{ inputs.package_path }}';
            const originalCwd = process.cwd();

            try {
              process.chdir(packagePath);
              
              // Get tarball filename without creating it
              const dryRunOutput = execSync('npm pack --dry-run --json', { encoding: 'utf8' });
              const packInfo = JSON.parse(dryRunOutput);
              const tarballName = packInfo[0].filename;
              
              // Create the actual tarball
              execSync('npm pack', { stdio: 'inherit' });
              
              // Verify tarball was created
              if (!fs.existsSync(tarballName)) {
                core.setFailed(`‚ùå Tarball not created: ${tarballName}`);
                return;
              }
              
              const tarballPath = `${{ inputs.package_path }}/${tarballName}`;
              
              // Set outputs
              core.setOutput('tarball_name', tarballName);
              core.setOutput('tarball_path', tarballPath);
              
              core.info(`üì¶ Created tarball: ${tarballName}`);
            } catch (error) {
              core.setFailed(`‚ùå Failed to create tarball: ${error.message}`);
            } finally {
              process.chdir(originalCwd);
            }

      - name: Create git tag
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.package-info.outputs.tag_name }}';
            const releaseName = '${{ steps.package-info.outputs.release_name }}';

            try {
              // Create the tag using GitHub API
              const { data: tag } = await github.rest.git.createTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName,
                message: releaseName,
                object: context.sha,
                type: 'commit'
              });
              
              // Create the reference to the tag
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: tag.sha
              });
              
              core.info(`‚úÖ Created and pushed tag: ${tagName}`);
            } catch (error) {
              core.setFailed(`‚ùå Failed to create tag: ${error.message}`);
            }

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tagName = '${{ steps.package-info.outputs.tag_name }}';
            const releaseName = '${{ steps.package-info.outputs.release_name }}';
            const tarballPath = '${{ steps.create-tarball.outputs.tarball_path }}';
            const tarballName = '${{ steps.create-tarball.outputs.tarball_name }}';
            const packageFullName = '${{ steps.package-info.outputs.package_full_name }}';
            const version = '${{ steps.package-info.outputs.version }}';
            const packageDisplayName = '${{ inputs.package_display_name }}';

            // Prepare release notes
            const releaseNotes = `Release candidate for ${packageFullName} v${version}. Download the tarball, test thoroughly, then use the corresponding publish workflow to release to NPM.`;

            try {
              // Create the release
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: releaseName,
                body: releaseNotes,
                prerelease: true
              });
              
              // Upload the tarball as a release asset
              const tarballContent = fs.readFileSync(tarballPath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: tarballName,
                data: tarballContent
              });
              
              core.info(`‚úÖ Created GitHub release: ${tagName}`);
            } catch (error) {
              core.setFailed(`‚ùå Failed to create release: ${error.message}`);
            }

      - name: Output release information
        uses: actions/github-script@v7
        with:
          script: |
            const packageFullName = '${{ steps.package-info.outputs.package_full_name }}';
            const version = '${{ steps.package-info.outputs.version }}';
            const tagName = '${{ steps.package-info.outputs.tag_name }}';
            const tarballName = '${{ steps.create-tarball.outputs.tarball_name }}';
            const packageDisplayName = '${{ inputs.package_display_name }}';
            const repository = '${{ github.repository }}';

            core.info('üéâ Release created successfully!');
            core.info('');
            core.info('üìã Release Details:');
            core.info(`  Package: ${packageFullName}`);
            core.info(`  Version: ${version}`);
            core.info(`  Tag: ${tagName}`);
            core.info(`  Tarball: ${tarballName}`);
            core.info('');
            core.info(`üîó Release URL: https://github.com/${repository}/releases/tag/${tagName}`);
            core.info('');
            core.info('üìã Next Steps:');
            core.info('1. Download and test the package tarball from the release');
            core.info(`2. Once UAT is complete, use the '${packageDisplayName} - Publish Release' workflow`);
