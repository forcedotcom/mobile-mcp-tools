/*
 * Copyright (c) 2025, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { join } from 'path';
import { Score } from '../schema/schema.js';
import { LlmClient } from '../llmclient/llmClient.js';
import { EVAL_DATA_FOLDER, LwcGenerationEvaluator } from './lwcGenerationEvaluator.js';
import { LwcReviewRefactorEvaluator } from './lwcReviewRefactorEvaluator.js';
import { loadEvaluationUnit } from '../utils/lwcUtils.js';
import { BaseEvaluator } from './baseEvaluator.js';
import { MobileWebMcpClient } from '../mcpclient/mobileWebMcpClient.js';

export class Evaluator extends BaseEvaluator {
  private readonly generationEvaluator: LwcGenerationEvaluator;
  private readonly reviewRefactorEvaluator: LwcReviewRefactorEvaluator;
  private readonly mcpClient: MobileWebMcpClient;
  constructor(
    generationEvaluator: LwcGenerationEvaluator,
    reviewRefactorEvaluator: LwcReviewRefactorEvaluator,
    mcpClient: MobileWebMcpClient
  ) {
    super();
    this.generationEvaluator = generationEvaluator;
    this.reviewRefactorEvaluator = reviewRefactorEvaluator;
    this.mcpClient = mcpClient;
  }

  static async create(
    evaluatorLlmClient: LlmClient,
    componentLlmClient: LlmClient
  ): Promise<Evaluator> {
    const mcpClient = new MobileWebMcpClient();
    await mcpClient.connect();
    return new Evaluator(
      await LwcGenerationEvaluator.create(evaluatorLlmClient, componentLlmClient, mcpClient),
      new LwcReviewRefactorEvaluator(evaluatorLlmClient, componentLlmClient, mcpClient),
      mcpClient
    );
  }
  /**
   * Evaluate the quality of the LWC component generated by the modelToEval against the reference LWC implementation
   * @param componentName - The component name to evaluate
   * @returns The score of the component
   */
  async evaluate(componentName: string): Promise<Score> {
    const componentPath = join(EVAL_DATA_FOLDER, componentName);
    const evaluationUnit = await loadEvaluationUnit(componentPath);
    if (!evaluationUnit) {
      throw new Error(`Evaluation unit not found for component ${componentName}`);
    }

    if (evaluationUnit.config.type === 'lwc-generation') {
      return this.generationEvaluator.evaluate(evaluationUnit);
    } else if (evaluationUnit.config.type === 'review-refactor') {
      return this.reviewRefactorEvaluator.evaluate(evaluationUnit);
    } else {
      throw new Error(`Unsupported evaluation type: ${evaluationUnit.config.type}`);
    }
  }

  async destroy(): Promise<void> {
    await this.generationEvaluator.destroy();
    await this.reviewRefactorEvaluator.destroy();
    await this.mcpClient.disconnect();
  }
}
