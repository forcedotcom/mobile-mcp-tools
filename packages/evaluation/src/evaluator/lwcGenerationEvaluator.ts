/*
 * Copyright (c) 2025, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { LwcEvaluatorAgent } from '../agent/lwcEvaluatorAgent.js';
import { Score } from '../schema/schema.js';
import LwcComponentAgent from '../agent/lwcComponentAgent.js';
import { EvaluationUnit } from '../utils/lwcUtils.js';
import { LlmClient } from '../llmclient/llmClient.js';
import { BaseEvaluator } from './baseEvaluator.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
export const EVAL_DATA_FOLDER = join(__dirname, '../../dataset');

/**
 * This class calls the judge model to evaluate the quality of
 * the LWC component generated by the modelToEval against
 * the reference LWC in the training data
 */
import { MobileWebMcpClient } from '../mcpclient/mobileWebMcpClient.js';

export class LwcGenerationEvaluator extends BaseEvaluator {
  private readonly evaluatorAgent: LwcEvaluatorAgent;
  private readonly componentAgent: LwcComponentAgent;
  private mobileWebMcpClient: MobileWebMcpClient;

  constructor(
    evaluatorLlmClient: LlmClient,
    componentLlmClient: LlmClient,
    mcpClient: MobileWebMcpClient
  ) {
    super();
    this.evaluatorAgent = new LwcEvaluatorAgent(evaluatorLlmClient);
    this.componentAgent = new LwcComponentAgent(componentLlmClient);
    this.mobileWebMcpClient = mcpClient;
  }

  static async create(
    evaluatorLlmClient: LlmClient,
    componentLlmClient: LlmClient,
    mcpClient: MobileWebMcpClient
  ): Promise<LwcGenerationEvaluator> {
    const evaluator = new LwcGenerationEvaluator(evaluatorLlmClient, componentLlmClient, mcpClient);
    await evaluator.initializeMobileWebMcpClient();
    return evaluator;
  }

  /**
   * Evaluate the quality of the LWC component generated by the modelToEval against the reference LWC implementation
   * @param input - The component name to evaluate
   * @returns The score of the component
   */
  async evaluate(evaluationUnit: EvaluationUnit): Promise<Score> {
    const mcpGroundings = await this.getMcpGroundings(evaluationUnit);

    const resultLwc = await this.componentAgent.generateLwcComponent(
      evaluationUnit.query,
      mcpGroundings
    );
    return await this.evaluatorAgent.evaluate(evaluationUnit.component, resultLwc);
  }

  private async getMcpGroundings(evaluationUnit: EvaluationUnit): Promise<string> {
    const groundings = [];
    if (evaluationUnit.config.mcpTools) {
      for (const tool of evaluationUnit.config.mcpTools) {
        const result = await this.mobileWebMcpClient.callTool(tool.toolId, tool.params);
        const groundingContext = result.content?.[0]?.text;
        if (groundingContext) {
          groundings.push(groundingContext);
        }
      }
    }
    return groundings.join('\n');
  }

  private async initializeMobileWebMcpClient(): Promise<void> {
    this.mobileWebMcpClient = new MobileWebMcpClient();
    await this.mobileWebMcpClient.connect();
  }
}
